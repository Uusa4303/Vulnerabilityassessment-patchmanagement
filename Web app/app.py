from flask import Flask, render_template, request, redirect, url_for, session

import socket
import requests
import re
import subprocess


app = Flask(__name__)
app.secret_key = 'your_secret_key'

def scan_ports(target, ports):
    open_ports = []
    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((target, port))
        if result == 0:
            open_ports.append(port)
        sock.close()
    return open_ports

def check_clickjacking_vulnerability(url):
    try:
        response = requests.get(url, allow_redirects=True)
        response.raise_for_status()

        headers = response.headers

        if 'X-Frame-Options' in headers:
            clickjacking_status = "Not vulnerable to Clickjacking"
        else:
            clickjacking_status = "Vulnerable to Clickjacking"

        return clickjacking_status

    except requests.RequestException as e:
        return f"Error accessing website: {e}"

def check_sql_injection(input_string):
    sql_injection_pattern = re.compile(r'\b(union|select|from|where|and|or)\b', re.IGNORECASE)
    if sql_injection_pattern.search(input_string):
        return "Potential SQL Injection detected"
    else:
        return "No SQL Injection detected"

def check_patch_status(software_version):
    # Example: Check if the software version is up-to-date
    latest_version = "2.0"
    if software_version == latest_version:
        return "Software is up-to-date"
    else:
        return f"Software update available. Latest version: {latest_version}"

def apply_patch(software_version):
    # Placeholder: Simulate applying a patch
    updated_version = "2.0"
    return f"update version available to update {updated_version}"

def run_nmap_scan(target_ip):
    try:
        result = subprocess.run(['nmap', '-p-', '--open', target_ip], capture_output=True, text=True)
        open_ports_lines = re.findall(r'(\d+\/[a-zA-Z]+)\s+open.*', result.stdout)
        open_ports = "\n".join(open_ports_lines) if open_ports_lines else "No open ports found"
        return open_ports
    except FileNotFoundError:
        return "Nmap not found. Make sure Nmap is installed on your system."

@app.route('/')

def index():
    return render_template('index.html')

@app.route('/scan', methods=['POST'])
def scan():
    target_ip = request.form['target_ip']
    website_url = request.form['website_url']
    software_version = request.form['software_version']
    port_option = request.form['port_option']

    open_ports = None  # Default value

    if port_option == 'specific_ports':
        ports_to_scan = [int(port) for port in request.form['ports'].split(',')]
        open_ports = scan_ports(target_ip, ports_to_scan)
        nmap_result = None
    else:
        nmap_result = run_nmap_scan(target_ip)

    # Perform vulnerability assessment
    clickjacking_status = check_clickjacking_vulnerability(website_url)
    sql_injection_status = check_sql_injection(website_url)
    patch_status = check_patch_status(software_version)

    # Store relevant information in session to pass to /patch
    patch_info = {
        'patch_result': patch_status,
        'current_version': software_version,
        'updated_version': '2.0',  # Assuming the updated version for simplicity
        'update_message': 'Update available! Latest version: 2.0',
        'update_icon': 'exclamation-triangle'
    }
    session['patch_info'] = patch_info
    return render_template('result.html', clickjacking_status=clickjacking_status,
                           sql_injection_status=sql_injection_status, nmap_result=nmap_result,
                           open_ports=open_ports)
    # return redirect(url_for('patch'))


@app.route('/patch')
def patch():
    # Retrieve the patch result, current_version, and updated_version from the session
    patch_info = session.get('patch_info', {})
    patch_result = patch_info.get('patch_result', '')
    current_version = patch_info.get('current_version', '')
    updated_version = patch_info.get('updated_version', '')
    update_message = patch_info.get('update_message', '')
    update_icon = patch_info.get('update_icon', '')
    
    # Render the patch_result.html template with the patch result and version information
    return render_template('patch.html', patch_result=patch_result, current_version=current_version,
                           updated_version=updated_version, update_message=update_message, update_icon=update_icon)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80, debug=True)