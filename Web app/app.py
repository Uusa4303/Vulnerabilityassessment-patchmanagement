from flask import Flask, render_template, request
import socket
import requests
import re

app = Flask(__name__)

def scan_ports(target, ports):
    open_ports = []
    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((target, port))
        if result == 0:
            open_ports.append(port)
        sock.close()
    return open_ports

def check_clickjacking_vulnerability(url):
    if not url.startswith(('http://', 'https://')):
        url = 'http://' + url

    try:
        response = requests.get(url)
        if response.status_code == 200:
            headers = response.headers

            # Check for Clickjacking vulnerability
            if 'X-Frame-Options' in headers:
                clickjacking_status = "Not vulnerable to Clickjacking"
            else:
                clickjacking_status = "Vulnerable to Clickjacking"

            return clickjacking_status
        else:
            return f"Website is not accessible. Status code: {response.status_code}"
    except requests.RequestException as e:
        return f"Error accessing website: {e}"

def check_policy_compliance(url):
    if not url.startswith(('http://', 'https://')):
        url = 'http://' + url

    try:
        response = requests.get(url)
        if response.status_code == 200:
            # Check for HTTPS policy compliance
            if response.url.startswith('https://'):
                return "Policy compliant: HTTPS is enabled"
            else:
                return "Policy non-compliant: HTTPS is not enabled"
        else:
            return f"Website is not accessible. Status code: {response.status_code}"
    except requests.RequestException as e:
        return f"Error accessing website: {e}"

def check_sql_injection(input_string):
    # Basic SQL injection check
    sql_injection_pattern = re.compile(r'\b(union|select|from|where|and|or)\b', re.IGNORECASE)
    if sql_injection_pattern.search(input_string):
        return "Potential SQL Injection detected"
    else:
        return "No SQL Injection detected"

def check_patch_status(software_version):
    # Example: Check if the software version is up-to-date
    latest_version = "2.0"
    if software_version == latest_version:
        return "Software is up-to-date"
    else:
        return f"Software update available. Latest version: {latest_version}"

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/scan', methods=['POST'])
def scan():
    target_ip = request.form['target_ip']
    ports_to_scan = [int(port) for port in request.form['ports'].split(',')]
    website_url = request.form['website_url']
    https_policy = request.form['https_policy']
    software_version = request.form['software_version']

    # Perform vulnerability assessment
    open_ports = scan_ports(target_ip, ports_to_scan)
    clickjacking_status = check_clickjacking_vulnerability(website_url)
    policy_compliance_status = check_policy_compliance(website_url)
    sql_injection_status = check_sql_injection(website_url)
    patch_status = check_patch_status(software_version)

    return render_template('result.html', open_ports=open_ports, clickjacking_status=clickjacking_status,
                           policy_compliance_status=policy_compliance_status, sql_injection_status=sql_injection_status,
                           patch_status=patch_status)

if __name__ == '__main__':
    app.run(debug=True)
